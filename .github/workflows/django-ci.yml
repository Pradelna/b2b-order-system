# GitHub Actions workflow for Django project in subdirectory 'washpr'
# (manage.py is located at washpr/manage.py)
name: Django CI

on:
  push:
    branches:
      - test-vps
  pull_request:
    branches:
      - test-vps

jobs:
  django-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: washpr  # run all commands from the 'washpr' directory
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: washpr
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Health checks to ensure the database is ready before running tests
        options: >-
          --health-cmd "pg_isready -U postgres -d washpr"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
    env:
      DJANGO_SETTINGS_MODULE: washpr.settings_ci
      PYTHONPATH: ${{ github.workspace }}
      POSTGRES_DB: washpr
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'  # enable pip cache for dependencies

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Make migrations (accounts first)
        run: python manage.py makemigrations accounts

      - name: Make migrations (all apps)
        run: python manage.py makemigrations

      - name: Apply migrations (accounts first)
        run: python manage.py migrate accounts --noinput

      - name: Apply migrations (all apps)
        run: python manage.py migrate --noinput

      - name: Apply migrations (accounts first)
        run: python manage.py migrate accounts --noinput

      - name: Apply migrations (all apps)
        run: python manage.py migrate --noinput

      - name: Run tests
        run: python manage.py test

      - name: Debug info (on failure)
        if: ${{ failure() }}
        run: |
          echo "Environment variables:"
          printenv
          echo "Python path and Django settings:"
          python - <<'PYCODE'
          import os, sys
          print("sys.path:", sys.path)
          print("DJANGO_SETTINGS_MODULE:", os.getenv("DJANGO_SETTINGS_MODULE"))
          print("PYTHONPATH:", os.getenv("PYTHONPATH"))
          try:
              import psycopg2
              conn = psycopg2.connect(
                  dbname=os.getenv("POSTGRES_DB"),
                  user=os.getenv("POSTGRES_USER"),
                  password=os.getenv("POSTGRES_PASSWORD"),
                  host=os.getenv("POSTGRES_HOST", "127.0.0.1"),
                  port=os.getenv("POSTGRES_PORT", "5432")
              )
              print("Successfully connected to Postgres database")
          except Exception as e:
              print("Postgres connection error:", e)
          PYCODE